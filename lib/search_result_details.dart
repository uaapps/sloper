import 'package:sloper/search_word.dart';

import 'word_description.dart';
import 'word_translations.dart';
import 'word_related_phrases.dart';
import 'database/dictionary.dart';

import 'package:flutter/material.dart';

List<Widget> _renderNotFoundResult(String word) => [
      word.isEmpty
          ? Text("–°–ø—Ä–æ–±—É–π—Ç–µ —â–æ—Å—å –ø–æ—à—É–∫–∞—Ç–∏.")
          : Text(
              "–ü–æ–∫–∏—â–æ, –≤ –Ω–∞—Å –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ –¥–ª—è —Å–ª–æ–≤–∞: $word. –ú–∏ —Å—Ç–∞—Ä–∞–Ω–Ω–æ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ —Ç–∏–º, —â–æ–± —Ü–µ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏. üôå"),
    ];

String _genderToString(Gender gender) {
  switch (gender) {
    case Gender.Femininum:
      return "–∂—ñ–Ω–æ—á–∏–π";
    case Gender.Maskulinum:
      return "—á–æ–ª–æ–≤—ñ—á–∏–π";
    case Gender.Neutrum:
      return "—Å–µ—Ä–µ–¥–Ω—ñ–π";
  }
}

List<Widget> _renderResult(DictionaryItem dictionaryItem) => [
      WordDescription(
        word: dictionaryItem.word,
        description: "–†—ñ–¥: ${_genderToString(dictionaryItem.gender)}.",
      ),
      Divider(),
      WordTranslations(
        translations: dictionaryItem.translations,
      ),
      // Divider(),
      // WordRelatedPhrases(
      //   phrase: dictionaryItem.phrase,
      //   phraseTranslation: dictionaryItem.phraseTranslation,
      // ),
    ];

List<Widget> buildSearchResultDetails(SearchWord word) {
  DictionaryItem? dictionaryItem = findItem(word.searchWord);
  return dictionaryItem == null
      ? _renderNotFoundResult(word.searchWord)
      : _renderResult(dictionaryItem);
}
